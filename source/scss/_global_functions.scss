//
//
//
// $FUNCTIONS
//
//
// @author Benjamin Charity <ben@benjamincharity.com>
//
// @doc
//  Define custom mixins and functions
// @end


// set a base font that should match the browser default
//$base_font_size: 16px;

//$site-width: 100%;

// Baseline, measured in pixels
// The value should be the same as the font-size value for the html element
// If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
// then the variable below would be 10px.
$baseline_px: 16px;

@mixin rem($property, $px_values) {
  // Convert the baseline into rems
  $baseline_rem: $baseline_px / 1rem;
  // Print the first line in pixel values
  #{$property}: $px_values;
  // If there is only one (numeric) value, return the property/value line for it.
  // scss-lint:disable NameFormat
  @if type-of($px_values) == 'number' {
    #{$property}: $px_values / $baseline_rem;
  } @else {
    // Create an empty list that we can dump values into
    $rem_values: unquote('');
    @each $value in $px_values {
      // If the value is zero, return 0
      @if $value == 0 {
        $rem_values: append($rem_values, $value);
      } @else {
        $rem_values: append($rem_values, $value / $baseline_rem);
      }
    }
    // Return the property and its list of converted values
    #{$property}: $rem_values;
  }
  // scss-lint:enable NameFormat
}


//
// Working in ems is annoying. Think in pixels by using this handy function
//
@function em_calc($px_width) {
  @return $px_width / $base_font_size * 1em;
}




///////////////////////////
//
// Pseudo Clearfix
//
///////////////////////////

//
// mixin to provide a clear to any element with IE6-7 support
//
@mixin clear_ie {
  &:before,
  &:after {
    content: '\0020';
    display: table;
  }

  &:after {
    clear: both;
  }
}

//
//mixin to provide a clear to modern browsers IE8 and up
//
@mixin clear {
  &::after {
    clear: both;
    content: '';
    display: table;
  }
}




///////////////////////////
//
// Animations
// Create vendor prefixed keyframes
//
///////////////////////////

//@mixin keyframes($name) {
  //@-o-keyframes $name { @content };
  //@-moz-keyframes $name { @content };
  //@-ms-keyframes $name { @content };
  //@-webkit-keyframes $name { @content };
  //@-keyframes $name { @content };
//}




///////////////////////////
//
// Vendor prefix items
//
///////////////////////////

// scss-lint:disable VendorPrefix
@mixin vendor_prefix($name, $argument) {
  -webkit-#{$name}: #{$argument};
  -moz-#{$name}: #{$argument};
  -ms-#{$name}: #{$argument};
  -o-#{$name}: #{$argument};
  #{$name}: #{$argument};
}
// scss-lint:enable VendorPrefix




///////////////////////////
//
// My custom transition function - much more humanistic than easing etc
//
///////////////////////////

@mixin custom_transition($property: all, $timing: 300ms, $delay: null) {
  // scss-lint:disable NameFormat
  @include vendor_prefix(
    transition,
    $property $timing cubic-bezier(.26, .86, .44, .985) $delay
  );
  // scss-lint:enable NameFormat
}




///////////////////////////
//
// Hide text
//
///////////////////////////

@mixin hide_text {
  color: transparent;
  overflow: hidden;
  text-indent: 100%;
  white-space: nowrap;
}




///////////////////////////
//
// Custom Animation
//
///////////////////////////

@mixin animation($duration: 200ms, $delay: 0, $count: 1) {
  @include vendor_prefix(
    animation-iteration-count,
    $count
  );

  @include vendor_prefix(
    animation-duration,
    $duration
  );

  @include vendor_prefix(
    animation-iteration-delay,
    $delay
  );
}




///////////////////////////
//
// Placeholders
//
///////////////////////////
// scss-lint:disable VendorPrefix
@mixin placeholders {
  &::-webkit-input-placeholder {
    @content
  }

  &:-moz-placeholder {
    @content
  }

  &::-moz-placeholder {
    @content
  }

  &:-ms-input-placeholder {
    @content
  }
}
// scss-lint:enable VendorPrefix




///////////////////////////
//
// CSS Columns
//
///////////////////////////

@mixin columns($count: 1, $spacing: 20px) {
  @include vendor_prefix(
    column-count,
    $count
  );

  @include vendor_prefix(
    column-gap,
    $spacing
  );
}




///////////////////////////
//
// Create a grid
// http://bjorkoy.com/2010/05/css-grids-with-sass/
//
///////////////////////////

// maths
$col_width: ($width - ($col_margin * ($columns - 1))) / $columns;
$col_total_width: $col_width + $col_margin;

// create row div
@mixin row() {
  @include clear;
  width: $width;
}

// create a column div
@mixin col($n: 1) {
  float: left;
  @include span($n);
}

// make an element span n columns
@mixin span($n: 1) {
  width: ($n * $col_width) + (($n - 1) * $col_margin);

  @if $n == $columns {
    margin-left: 0;
  } @else {
    margin-left: $col_margin;
  }
}

// the first column in a row needs this
@mixin first() {
  margin-left: 0;
}

// if you need to overwrite a previous `first()`, use this
@mixin reset_first() {
  margin-left: $col_margin;
}

// prepend n blank columns
@mixin prepend($n: 1) {
  margin-left: $col_total_width * $n;
}

// append n blank columns
@mixin append($n: 1) {
  margin-right: $col_total_width * $n + $col_margin;
}




///////////////////////////
//
// CSS Backface Flicker Fix
//
///////////////////////////
@mixin backface_flicker_fix() {
  @include vendor_prefix(
    backface-visibility,
    hidden
  );
}



///////////////////////////
//
// Create Pseudo Element Triangles
//
///////////////////////////
@mixin pseudo_triangle($direction, $color, $width, $height, $position:'', $centered:'') {

  @if $direction == down {
    border-top: $height solid $color;
  } @else if $direction == up {
    border-bottom: $height solid $color;
  }

  border-left: $width solid transparent;
  border-right: $width solid transparent;
  content: '';
  display: block;
  height: 0;
  position: absolute;

  @if #{$centered} == true {
    left: 50%;
    margin-left: -$width;
  }

  @if $position == top {
    top: -$height;
  } @else if $position == bottom {
    bottom: -$height;
  }

  width: 0;
}




///////////////////////////
//
// Flexbox
// http://umaar.github.io/css-flexbox-demo/
// https://github.com/doctyper/flexie
//
//
// flex_container() direction is required.
//
// Possible values:
//  - vertical
//  - horizontal
//
///////////////////////////

@mixin flex_container($direction) {
  @include vendor_prefix(
    box-orient,
    $direction
  );

  // Translate the new syntax into the old syntax for IE
  @if $direction == vertical {
    @include vendor_prefix(
      flex-direction,
      column
    );
  } @else {
    @include vendor_prefix(
      flex-direction,
      row
    );
  }

  // scss-lint:disable DuplicateProperty
  display: -ms-flexbox;
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flexbox;
  display: box;
  display: flex;
  // scss-lint:enable DuplicateProperty
}

@mixin flex_component($number: 1) {
  // scss-lint:disable VendorPrefix
  -webkit-box-flex : $number;
  -webkit-flex     : $number;
  -moz-box-flex    : $number;
  -ms-flex         : $number;
  flex             : $number;
  // scss-lint:enable VendorPrefix
}

@mixin flex_align($position: center) {
  // scss-lint:disable VendorPrefix
  -webkit-box-align   : $position;
  -webkit-align-items : $position;
  -moz-box-align      : $position;
  -ms-flex_align      : $position;
  align-items         : $position;
  // scss-lint:enable VendorPrefix
}

@mixin flex_pack($position: center) {
  // scss-lint:disable VendorPrefix
  -webkit-box-pack        : $position;
  -webkit-justify-content : $position;
  -moz-box-pack           : $position;
  -ms-flex_pack           : $position;
  // scss-lint:enable VendorPrefix
}





///////////////////////////
//
// Breakpoints
// http://css-tricks.com/conditional-media-query-mixins/
//
///////////////////////////


@mixin breakpoint($point) {
  @if $point == breakpoint-only-small {
    @media (max-width: 500px) { @content; }
  } @else if $point == breakpoint-medium {
    @media (min-width: 500px) { @content; }
  } @else if $point == breakpoint-medium-large {
    @media (min-width: 768px) { @content; }
  } @else if $point == breakpoint-large {
    @media (min-width: 1000px)  { @content; }
  } @else if $point == breakpoint-very-large {
    @media (min-width: 1200px)  { @content; }
  }
}




///////////////////////////
//
// Animations
// Create vendor prefixed keyframes
//
///////////////////////////

@mixin keyframes($name) {
  // scss-lint:disable VendorPrefix
  @-o-keyframes #{$name} { @content };
  @-moz-keyframes #{$name} { @content };
  @-ms-keyframes #{$name} { @content };
  @-webkit-keyframes #{$name} { @content };
  @-keyframes #{$name} { @content };
  // scss-lint:enable VendorPrefix
}

